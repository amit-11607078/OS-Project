#include <stdio.h>

#include <stdbool.h>

#define R 3

#define P 3 

int newAvailable[R],i,j;

void Need(int need[P][R], int max[P][R], int allocation[P][R]){
for (i = 0 ; i < P ; i++)
for (j = 0 ; j < R ; j++)
need[i][j] = max[i][j] - allocation[i][j];
}

bool isSafe(int processes[], int available[], int max[][R], int allocation[][R]){

int need[P][R];

Need(need, max, allocation);
 
bool finish[P] = {0};

int safeSeq[P];

for (i = 0; i < R ; i++)
newAvailable[i] = available[i];
 
int count = 0;
while (count < P)

{

bool found = false;
int p;
for (p = 0; p < P; p++)

{

if (finish[p] == 0)

{

int j;

for (j = 0; j < R; j++)

if (need[p][j] > newAvailable[j])

break;
if (j == R)
{
int k;
for (k = 0 ; k < R ; k++)

newAvailable[k] += allocation[p][k];

safeSeq[count++] = p;

finish[p] = 1;

found = true;

}

}

}

if (found == false)
{

printf("System is not in safe state\n"); return false;

}

}
printf("System is in safe state\nSafe sequence is: < ");
for (i = 0; i < P ; i++) printf("%d ",safeSeq[i]);
printf(">\n"); return true;

}

void displayDefaultValues(int available[], int max[][R], int allocation[][R]){

printf("No. of Processes: %d\n", P);

printf("No. of Resources: %d\n", R);

printf("Available Resources: < ");
 for(i = 0; i < P; i++){

printf("%d ",available[i]);

}
 
printf(">\n");

printf("Maximum Resources Allocated:\n");

for (i = 0 ; i < P ; i++){ for (j = 0 ; j < R ; j++)
printf("%d ",max[i][j]); printf("\n");

}

printf("Resources Currently Allocated:\n");
for (i = 0 ; i < P ; i++)
{ 
for (j = 0 ; j < R ; j++)
printf("%d ",allocation[i][j]); printf("\n");

}

}

int main()

{

int processes[] = {0, 1, 2};

int available[] = {3, 2, 2};

int max[P][R] = {
{8, 4, 3}, {6, 2, 0}, {3, 3, 3} };

int allocation[P][R] = {
{0, 0, 1}, {3, 2, 0}, {2, 1, 1}, };

printf("----------------------------------------------------------------------\n"); displayDefaultValues(available, max, allocation); printf("Status of the System: ");


isSafe(processes, available, max, allocation);

printf("----------------------------------------------------------------------\n");
 
int pNo,n[R];

xyz:

printf("\nEnter the process no. which demands for resources(0, 1, 2): "); scanf("%d",&pNo);

if(pNo < 3 && pNo >= 0){

printf("Enter the no. of resources required: ");

for(i = 0; i < R ; i++){

scanf("%d",&n[i]);

}

for(i = 0; i < R; i++){

available[i] = available[i] - n[i];

}

}

switch(pNo){

case 0: for(j = 0; j < R; j++){

allocation[0][j] = allocation[0][j] + n[j];

}

isSafe(processes, available, max, allocation);

break;

case 1: for(j = 0; j < R; j++){

allocation[1][j] = allocation[1][j] + n[j];

}

isSafe(processes, available, max, allocation);

break;

case 2: for(j = 0; j < R; j++){

allocation[2][j] = allocation[2][j] + n[j];

}

isSafe(processes, available, max, allocation);

break;

default : printf("Please choose the right Process(0, 1, 2): ");goto xyz;

}

return 0;
}
